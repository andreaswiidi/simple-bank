// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction_history.sql

package db

import (
	"context"
	"database/sql"
)

const createTransactionHistory = `-- name: CreateTransactionHistory :one
INSERT INTO transaction_history (
  account_id,
  amount,
  transaction_type,
  transfer_history_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, account_id, amount, transaction_type, transfer_history_id, created_at
`

type CreateTransactionHistoryParams struct {
	AccountID         int64
	Amount            int64
	TransactionType   string
	TransferHistoryID sql.NullInt64
}

func (q *Queries) CreateTransactionHistory(ctx context.Context, arg CreateTransactionHistoryParams) (TransactionHistory, error) {
	row := q.db.QueryRowContext(ctx, createTransactionHistory,
		arg.AccountID,
		arg.Amount,
		arg.TransactionType,
		arg.TransferHistoryID,
	)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.TransactionType,
		&i.TransferHistoryID,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionHistory = `-- name: GetTransactionHistory :one
SELECT id, account_id, amount, transaction_type, transfer_history_id, created_at FROM transaction_history
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionHistory(ctx context.Context, id int64) (TransactionHistory, error) {
	row := q.db.QueryRowContext(ctx, getTransactionHistory, id)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.TransactionType,
		&i.TransferHistoryID,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionHistories = `-- name: ListTransactionHistories :many
SELECT id, account_id, amount, transaction_type, transfer_history_id, created_at FROM transaction_history
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTransactionHistoriesParams struct {
	AccountID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListTransactionHistories(ctx context.Context, arg ListTransactionHistoriesParams) ([]TransactionHistory, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionHistories, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionHistory
	for rows.Next() {
		var i TransactionHistory
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.TransactionType,
			&i.TransferHistoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
