// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers_history.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers_history (
  from_account_id,
  to_account_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (TransfersHistory, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i TransfersHistory
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getDetilTransfer = `-- name: GetDetilTransfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers_history
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDetilTransfer(ctx context.Context, id int64) (TransfersHistory, error) {
	row := q.db.QueryRowContext(ctx, getDetilTransfer, id)
	var i TransfersHistory
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfersHistoryAccount = `-- name: ListTransfersHistoryAccount :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers_history
WHERE 
    from_account_id = $1 OR
    to_account_id = $1 OR
    (to_account_id = $1 AND (from_account_id = $2))
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersHistoryAccountParams struct {
	FromAccountID   int64
	FromAccountID_2 int64
	Limit           int32
	Offset          int32
}

func (q *Queries) ListTransfersHistoryAccount(ctx context.Context, arg ListTransfersHistoryAccountParams) ([]TransfersHistory, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersHistoryAccount,
		arg.FromAccountID,
		arg.FromAccountID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransfersHistory
	for rows.Next() {
		var i TransfersHistory
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
